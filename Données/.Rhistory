legend = c("Beta (Simulation)", "Beta (Analytique)",
"Puissance (Simulation)", "Puissance (Analytique)",
"Significance Level (0.05)"),
col = c("blue", "red", "green", "orange", "gray"),
pch = c(16, 17, 16, 17, NA), lty = c(1, 2, 1, 2, 2), xpd=TRUE)
n <- 100
m <- 10000
a <- 0
c <- 1/2
theta0 <- 1
theta1 <- 2
alphavals <- c(0.01, 0.05, 0.1)
# Définition de la zone critique
zone <- function(x, a, c) {
sum((x - a)^c)
}
# Matrices pour stocker beta et puissance
Puissance <- numeric(length(alphavals))
beta <- numeric(length(alphavals))
# Boucle pour calculer beta et puissance
for (k in seq_along(alphavals)) {
alpha <- alphavals[k]
# Seuil critique
g <- (theta0/theta1) * qchisq(1 - alpha, 2 * n)
rejet <- 0
for (j in 1:m) {
# Génération des échantillons sous l'alternative
X <- rweibull(n, c, theta1^(1/c))
if ((2 / theta1) *zone(X, a, c) < g) {
rejet <- rejet + 1
}
}
# Calcul de beta et puissance
beta[k] <- rejet / m
Puissance[k]<- 1 - beta[k]
}
# Calcul analytique de beta et puissance pour comparaison
betaT <- numeric(length(alphavals))
PuissanceT <- numeric(length(alphavals))
for (k in seq_along(alphavals)) {
alpha <- alphavals[k]
betaT[k] <- pchisq((theta0 / theta1) * qchisq(1 - alpha, 2 * n), 2 * n)
PuissanceT[k] <- 1 - betaT[k]
}
# Affichage des résultats
cat("Beta (Simulation):\n")
print(beta)
cat("\nPuissance (Simulation):\n")
print(Puissance)
cat("\nBeta (Analytique):\n")
print(betaT)
cat("\nPuissance (Analytique):\n")
print(PuissanceT)
n <- 100
m <- 100000
a <- 0
c <- 1/2
theta0 <- 1
theta1 <- 2
alphavals <- c(0.01, 0.05, 0.1)
# Définition de la zone critique
zone <- function(x, a, c) {
sum((x - a)^c)
}
# Matrices pour stocker beta et puissance
Puissance <- numeric(length(alphavals))
beta <- numeric(length(alphavals))
# Boucle pour calculer beta et puissance
for (k in seq_along(alphavals)) {
alpha <- alphavals[k]
# Seuil critique
g <- (theta0/theta1) * qchisq(1 - alpha, 2 * n)
rejet <- 0
for (j in 1:m) {
# Génération des échantillons sous l'alternative
X <- rweibull(n, c, theta1^(1/c))
if ((2 / theta1) *zone(X, a, c) < g) {
rejet <- rejet + 1
}
}
# Calcul de beta et puissance
beta[k] <- rejet / m
Puissance[k]<- 1 - beta[k]
}
# Calcul analytique de beta et puissance pour comparaison
betaT <- numeric(length(alphavals))
PuissanceT <- numeric(length(alphavals))
for (k in seq_along(alphavals)) {
alpha <- alphavals[k]
betaT[k] <- pchisq((theta0 / theta1) * qchisq(1 - alpha, 2 * n), 2 * n)
PuissanceT[k] <- 1 - betaT[k]
}
# Affichage des résultats
cat("Beta (Simulation):\n")
print(beta)
cat("\nPuissance (Simulation):\n")
print(Puissance)
cat("\nBeta (Analytique):\n")
print(betaT)
cat("\nPuissance (Analytique):\n")
print(PuissanceT)
n <- 100
m <- 1000000
a <- 0
c <- 1/2
theta0 <- 1
theta1 <- 2
alphavals <- c(0.01, 0.05, 0.1)
# Définition de la zone critique
zone <- function(x, a, c) {
sum((x - a)^c)
}
# Matrices pour stocker beta et puissance
Puissance <- numeric(length(alphavals))
beta <- numeric(length(alphavals))
# Boucle pour calculer beta et puissance
for (k in seq_along(alphavals)) {
alpha <- alphavals[k]
# Seuil critique
g <- (theta0/theta1) * qchisq(1 - alpha, 2 * n)
rejet <- 0
for (j in 1:m) {
# Génération des échantillons sous l'alternative
X <- rweibull(n, c, theta1^(1/c))
if ((2 / theta1) *zone(X, a, c) < g) {
rejet <- rejet + 1
}
}
# Calcul de beta et puissance
beta[k] <- rejet / m
Puissance[k]<- 1 - beta[k]
}
# Calcul analytique de beta et puissance pour comparaison
betaT <- numeric(length(alphavals))
PuissanceT <- numeric(length(alphavals))
for (k in seq_along(alphavals)) {
alpha <- alphavals[k]
betaT[k] <- pchisq((theta0 / theta1) * qchisq(1 - alpha, 2 * n), 2 * n)
PuissanceT[k] <- 1 - betaT[k]
}
# Affichage des résultats
cat("Beta (Simulation):\n")
print(beta)
cat("\nPuissance (Simulation):\n")
print(Puissance)
cat("\nBeta (Analytique):\n")
print(betaT)
cat("\nPuissance (Analytique):\n")
print(PuissanceT)
par(mar = c(5, 5, 4, 10))
# Création du graphique
plot(alphavals, beta, type = "o", col = "blue", pch = 16, ylim = c(0, 1),
xlab = "Alpha", ylab = "Probability", main = "Beta and Puissance: Simulation vs Analytique")
lines(alphavals, betaT, type = "o", col = "red", pch = 17, lty = 2)
points(alphavals, Puissance, col = "green", pch = 16, type = "o")
lines(alphavals, PuissanceT, col = "orange", pch = 17, type = "o", lty = 2)
# Ajout d'une ligne horizontale pour le seuil de signification
abline(h = 0.05, col = "gray", lty = 2)
# Légende
legend("topright",inset = c(-0.5, 0),
legend = c("Beta (Simulation)", "Beta (Analytique)",
"Puissance (Simulation)", "Puissance (Analytique)",
"Significance Level (0.05)"),
col = c("blue", "red", "green", "orange", "gray"),
pch = c(16, 17, 16, 17, NA), lty = c(1, 2, 1, 2, 2), xpd=TRUE)
par(mar = c(5, 5, 4, 10))
# Graphique des résultats
plot(theta1vals, beta, type = "o", col = "blue", pch = 16, ylim = c(0, 1),
xlab = expression(theta[1]), ylab = "Probability", main = "Beta et Puissance")
lines(theta1vals, betaT, type = "o", col = "red", pch = 17, lty = 2)
points(theta1vals, Puissance, col = "green", pch = 16, type = "o")
lines(theta1vals, PuissanceT, col = "orange", pch = 17, type = "o", lty = 2)
# Ajout de la légende
legend("topright",inset = c(-0.5, 0),
legend = c("Beta (Simulation)", "Beta (Analytique)",
"Puissance (Simulation)", "Puissance (Analytique)"),
col = c("blue", "red", "green", "orange"),
pch = c(16, 17, 16, 17), lty = c(1, 2, 1, 2), xpd=TRUE)
devtools::install(~/Github/blackjack)
devtools::install("~/Github/blackjack")
library(blackjack)
jeu()
shiny::runApp(system.file("shinyapp", package = "blackjack"))
library(caret)
library(nnet)
# Fonction pour trouver le meilleur i via validation croisée
find_best_i_cv_multi <- function(data_train, target_var, max_vars = 50, k = 5) {
set.seed(123)
iap_cv <- c()
sis_res <- msiscreening(data_train)  # Screening pour ordonner les variables
sis_probes <- rownames(sis_res)[order(sis_res$pval_fisher)]
for (i in 1:max_vars) {
# Construire la formule
formula <- as.formula(paste(target_var, "~", paste(sis_probes[1:i], collapse = " + ")))
# Validation croisée
train_control <- trainControl(method = "cv", number = k)
model <- train(formula, data = data_train, method = "multinom", trControl = train_control, trace = FALSE)
# Stocker l'erreur moyenne
iap_cv <- c(iap_cv, min(model$results$Accuracy))  # Prendre 1 - Accuracy comme erreur
}
best_i <- which.max(iap_cv)
return(list(best_i = best_i, accuracy = iap_cv))
}
# Exemple d'utilisation
result_smoking <- find_best_i_cv_multi(data_train1, "smoking_status")
########TP3 AFC
#####Exercice 31#####
library(FactoMineR)
library(factoextra)
#1
data("USArrests")
head(USArrests)
class(USArrests)
#2
princomp_res <- princomp(USArrests, cor = TRUE)
head(princomp_res$scores, 5)
library(xtable)
xtable(head(princomp_res$scores, 5))
# Utilisation de prcomp pour calculer les composantes principales
prcomp_res <- prcomp(USArrests, scale. = TRUE)
head(prcomp_res$x, 5)
xtable(head(prcomp_res$x, 5))
#3
gsvd <- function(Z,r,c) {
#––-entree–––––––-
# Z matrice numerique de dimension (n,p) et de rang k
# r poids de la metrique des lignes
N=diag(r)
# c poids de la metrique des colonnes
M=diag(c)
#––-sortie–––––––-
# d vecteur de taille k contenant les valeurs singulieres (racines carres des valeurs propres)
# U matrice de dimension (n,k) des vecteurs propres de de ZMZ’N
# V matrice de dimension (p,k) des vecteurs propres de de Z’NZM #––––––––––––––
k <- qr(Z)$rank
colnames<-colnames(Z)
rownames<-rownames(Z)
Z <- as.matrix(Z)
Ztilde <- diag(sqrt(r)) %*% Z %*% diag(sqrt(c))
e <- svd(Ztilde)
U <-diag(1/sqrt(r))%*%e$u[,1 :k] # Attention : ne s’ecrit comme cela que parceque N et M sont diagonales !
V <-diag(1/sqrt(c))%*%e$v[,1 :k]
d <- e$d[1 :k]
rownames(U) <- rownames
rownames(V) <- colnames
if (length(d)>1)
colnames(U) <- colnames (V) <- paste("dim", 1 :k, sep = "")
return(list(U=U,V=V,d=d))
}
#a)
US.scaled <- scale(USArrests)
#b)
n <- nrow(US.scaled)
p <- ncol(US.scaled)
r <- rep(1, n) # poids pour les lignes
c <- rep(1, p) # poids pour les colonnes
# Utiliser la fonction gsvd pour calculer l'ACP
gsvd_res <- gsvd(US.scaled, r, c)
# Afficher les résultats pour les premiers états
coord_ind <- gsvd_res$U %*% diag(gsvd_res$d)
head(coord_ind, 5)
xtable(head(coord_ind, 5))
#d)
PCA_res <- PCA(USArrests, scale.unit = TRUE, graph = FALSE)
head(PCA_res$ind$coord, 5)
library(blackjack)
run_blackjack()
setwd("~/Github/Projet_tuto")
data = read.csv("dataStationsgroupe.csv")
setwd("~/Github/Projet_tuto/Données")
data = read.csv("dataStationsgroupe.csv")
View(data)
library(dplyr)
library(extRemes)
View(data)
fevd(data$NOM$"REVENTIN", type="GEV", method = "Lmoments")
fevd(data$NOM[which(NOM == "REVENTIN")], type="GEV", method = "Lmoments")
fevd(data$NOM[which(data$NOM == "REVENTIN")], type="GEV", method = "Lmoments")
fevd(data$NOM[which(data$NOM == "REVENTIN")], type="GEV", method = "MLE")
data$NOM[which(data$NOM == "REVENTIN")]
fevd(data$PLUIE[which(data$NOM == "REVENTIN")], type="GEV", method = "MLE")
fevd(na.omit(data$PLUIE[which(data$NOM == "REVENTIN")]), type="GEV", method = "MLE")
ci(test, type="parameter")
test = fevd(na.omit(data$PLUIE[which(data$NOM == "REVENTIN")]), type="GEV", method = "MLE")
ci(test, type="parameter")
interval = ci(test, type="parameter")
summary(interval)
interval$[1]
interval[1]
interval[3,1]
data_ksi = data.frame(data$NOM)
View(data_ksi)
data_ksi = data.frame(unique(data$NOM))
View(data_ksi)
ksi=c()
data_ksi$ksi=ksi
View(data_ksi)
data_ksi$ksi=ksi
View(data_ksi)
View(data_ksi)
typeof(data_ksi)
data_ksi = as.data.frame(data_ksi)
data_ksi$ksi=ksi
View(data_ksi)
lower =c()
upper =c()
for(station in data$NOM){
test = fevd(na.omit(data$PLUIE[which(data$NOM == station)]), type="GEV", method = "MLE")
interval = ci(test, type="parameter")
ksi= c(ksi, interval[3,2])
lower=c(lower, interval[3,1])
upper=c(upper, interval[3,3])
}
View(data_ksi)
nom = data$NOM
for(station in nom){
test = fevd(na.omit(data$PLUIE[which(data$NOM == station)]), type="GEV", method = "MLE")
interval = ci(test, type="parameter")
ksi= c(ksi, interval[3,2])
lower=c(lower, interval[3,1])
upper=c(upper, interval[3,3])
}
test = fevd(na.omit(data$PLUIE[which(data$NOM == "
REVENTIN")]), type="GEV", method = "MLE")
test = fevd(na.omit(data$PLUIE[which(data$NOM == "REVENTIN")]), type="GEV", method = "MLE")
test
interval = ci(test, type="parameter")
interval
interval[3,2]
ksi= c(ksi, interval[3,2])
ksi
ksi=c()
lower =c()
upper =c()
nom = data$NOM
i=1
for(station in nom){
test = fevd(na.omit(data$PLUIE[which(data$NOM == station)]), type="GEV", method = "MLE")
interval = ci(test, type="parameter")
ksi[i]= c(ksi, interval[3,2])
lower[i]=c(lower, interval[3,1])
upper[i]=c(upper, interval[3,3])
i= i+1
}
ksi=c()
lower =c()
upper =c()
nom = unique(data$NOM)
i=1
for(station in nom){
test = fevd(na.omit(data$PLUIE[which(data$NOM == station)]), type="GEV", method = "MLE")
interval = ci(test, type="parameter")
ksi[i]= c(ksi, interval[3,2])
lower[i]=c(lower, interval[3,1])
upper[i]=c(upper, interval[3,3])
i= i+1
}
ksi
ksi=c()
lower =c()
upper =c()
nom = unique(data$NOM)
for(i in 1:lenght(nom)){
test = fevd(na.omit(data$PLUIE[which(data$NOM == nom[i])]), type="GEV", method = "MLE")
interval = ci(test, type="parameter")
ksi[i]= c(ksi, interval[3,2])
lower[i]=c(lower, interval[3,1])
upper[i]=c(upper, interval[3,3])
}
for(i in 1:length(nom)){
test = fevd(na.omit(data$PLUIE[which(data$NOM == nom[i])]), type="GEV", method = "MLE")
interval = ci(test, type="parameter")
ksi[i]= c(ksi, interval[3,2])
lower[i]=c(lower, interval[3,1])
upper[i]=c(upper, interval[3,3])
}
ci(fevd(na.omit(data$PLUIE[which(data$NOM == "CESSIEU")]), type="GEV", method = "MLE"))
ci(fevd(na.omit(data$PLUIE[which(data$NOM == "CESSIEU")]), type="GEV", method = "MLE"),type="parameter")
nom = "CESSIEU"
for(i in 1:length(nom)){
test = fevd(na.omit(data$PLUIE[which(data$NOM == nom[i])]), type="GEV", method = "MLE")
interval = ci(test, type="parameter")
ksi[i]= c(ksi, interval[3,2])
lower[i]=c(lower, interval[3,1])
upper[i]=c(upper, interval[3,3])
}
nom = c("CESSIEU")
for(i in 1:length(nom)){
test = fevd(na.omit(data$PLUIE[which(data$NOM == nom[i])]), type="GEV", method = "MLE")
interval = ci(test, type="parameter")
ksi[i]= c(ksi, interval[3,2])
lower[i]=c(lower, interval[3,1])
upper[i]=c(upper, interval[3,3])
}
ksi=c()
lower =c()
upper =c()
nom = unique(data$NOM)
nom = c("CESSIEU")
for(i in 1:length(nom)){
test = fevd(na.omit(data$PLUIE[which(data$NOM == nom[i])]), type="GEV", method = "MLE")
interval = ci(test, type="parameter")
ksi[i]= interval[3,2]
lower[i]=interval[3,1]
upper[i]=interval[3,3]
}
nom = unique(data$NOM)
for(i in 1:length(nom)){
test = fevd(na.omit(data$PLUIE[which(data$NOM == nom[i])]), type="GEV", method = "MLE")
interval = ci(test, type="parameter")
ksi[i]= interval[3,2]
lower[i]=interval[3,1]
upper[i]=interval[3,3]
}
ksi=c()
lower =c()
upper =c()
nom = unique(data$NOM)
for(i in 1:length(nom)){
test = fevd(na.omit(data$PLUIE[which(data$NOM == nom[i])]), type="GEV", method = "MLE")
interval = ci(test, type="parameter")
ksi[i]= interval[3,2]
lower[i]=interval[3,1]
upper[i]=interval[3,3]
}
View(data_ksi)
nom= c("CHAMROUSSE")
for(i in 1:length(nom)){
test = fevd(na.omit(data$PLUIE[which(data$NOM == nom[i])]), type="GEV", method = "MLE")
interval = ci(test, type="parameter")
ksi[i]= interval[3,2]
lower[i]=interval[3,1]
upper[i]=interval[3,3]
}
test = fevd(na.omit(data$PLUIE[which(data$NOM == nom[i])]), type="GEV", method = "MLE")
interval = ci(test, type="parameter")
test
ci(test)
nom = unique(data$NOM)[-33,]
nom = unique(data$NOM)[-33]
ksi=c()
lower =c()
upper =c()
nom = unique(data$NOM)[-33]
for(i in 1:length(nom)){
test = fevd(na.omit(data$PLUIE[which(data$NOM == nom[i])]), type="GEV", method = "MLE")
interval = ci(test, type="parameter")
ksi[i]= interval[3,2]
lower[i]=interval[3,1]
upper[i]=interval[3,3]
}
data_wcham = data_ksi[-33,1]
data_wcham$ksi = ksi
cbind(data_wcham,ksi,lower,upper)
View(data_wcham)
data_wcham = data_ksi[-33,]
cbind(data_wcham,ksi,lower,upper)
data_wcham= as.data.frame(cbind(data_wcham,ksi,lower,upper))
library(sf)
data = st_read("dataStationsGroupe.geojson")
data_ksi = data.frame(unique(data$NOM))
data_ksi = as.data.frame(data_ksi)
ksi=c()
lower =c()
upper =c()
nom = unique(data$NOM)[-33]
for(i in 1:length(nom)){
test = fevd(na.omit(data$PLUIE[which(data$NOM == nom[i])]), type="GEV", method = "MLE")
interval = ci(test, type="parameter")
ksi[i]= interval[3,2]
lower[i]=interval[3,1]
upper[i]=interval[3,3]
}
data_wcham = data_ksi[-33,]
data_wcham= as.data.frame(cbind(data_wcham,ksi,lower,upper))
View(data_wcham)
View(data)
data_ksi = data.frame(unique(data$NOM), unique(data$geometry))
data = st_read("dataStationsGroupe.geojson")
data_ksi = data.frame(unique(data$NOM), unique(data$geometry))
View(data)
for(i in 1:dim(data_wcham)[1]){
data_wcham$GEOMETRY[i]= data$geometry[which(data$NOM == data_wcham$data_wcham)]
}
View(data_wcham)
for(i in 1:dim(data_wcham)[1]){
data_wcham$GEOMETRY[i]= data$geometry[which(data$NOM == data_wcham$data_wcham[i])]
}
View(data_wcham)
for(i in 1:dim(data_wcham)[1]){
if (data_wcham$ksi[i] < data_wcham$lower[i]){
data_wcham$loi[i]= -1
}else if(data_wcham$ksi[i] > data_wcham$lower[i] & data_wcham$ksi[i] < data_wcham$upper[i]){
data_wcham$loi[i]= 0
}else{
data_wcham$loi[i]= 1
}
}
View(data_wcham)
data_wcham= as.data.frame(cbind(data_wcham,ksi,lower,upper))
for(i in 1:dim(data_wcham)[1]){
data_wcham$GEOMETRY[i]= data$geometry[which(data$NOM == data_wcham$data_wcham[i])]
}
for(i in 1:dim(data_wcham)[1]){
if (data_wcham$upper[i] < 0 ){
data_wcham$loi[i]= -1
}else if(data_wcham$lower[i] < 0 & data_wcham$upper[i] > 0){
data_wcham$loi[i]= 0
}else{
data_wcham$loi[i]= 1
}
}
